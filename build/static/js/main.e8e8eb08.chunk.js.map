{"version":3,"sources":["Components/Header/index.js","Components/Helper/index.js","Pages/ChannelList/index.js","Pages/ShowList/index.js","Pages/DetailView/index.js","Pages/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["header","props","className","ref","nav","style","marginBottom","src","height","margin","onClick","scrollFunction","HelperFunction","formatDate","date","today","Date","Number","dd","getDate","mm","getMonth","yyyy","getFullYear","addTime","time","minToAdd","split","inMinute","parseFloat","endTime","getHourFromMin","n","hours","rHours","Math","floor","minutes","round","ScheduleCard","console","log","channelName","match","params","name","filterList","data","filter","i","show","network","Fragment","id","map","item","key","to","airtime","runtime","dangerouslySetInnerHTML","__html","summary","ShowList","searchTerm","event","dataSource","state","searchInput","target","value","toLowerCase","tableData","String","toString","search","length","setState","channel","this","textAlign","width","marginLeft","type","placeholder","onKeyUp","React","Component","detailView","find","padding","background","image","medium","fontSize","fontWeight","season","status","language","MainComponent","axios","get","then","res","push","Set","catch","error","finally","exact","path","render","DetailView","App","createRef","Header","window","scrollTo","top","current","offsetHeight","left","behavior","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8e8eb08.chunk.js","sourcesContent":["import React from \"react\";\n\nconst header = props => {\n  return (\n    <section className=\"et-hero-tabs\" ref={props.nav}>\n      <h1 style={{ marginBottom: \"1%\" }}>\n        <img src=\"/image/television.png\" style={{ height: \"60px\" }}></img> US TV\n        Schedule\n      </h1>\n      <h6 style={{ margin: \"unset\" }}>One Stop Destination for TV Schedule</h6>\n      <button className=\"headerButton\" onClick={props.scrollFunction}>\n        Browse List\n      </button>\n    </section>\n  );\n};\n\nexport default header;\n","import React from \"react\";\n\nconst HelperFunction = {\n  formatDate: function(date = \"\") {\n    if (date) {\n      var today = new Date(Number(date));\n    } else {\n      var today = new Date();\n    }\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1; //January is 0!\n    var yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n\n    return `${dd}/${mm}/${yyyy}`;\n  },\n\n  addTime: function(time, minToAdd = 0) {\n    let split = time.split(\":\");\n    let inMinute = split[0] * 60 + parseFloat(split[1]);\n    let endTime = inMinute + parseFloat(minToAdd);\n    return endTime;\n  },\n  getHourFromMin: function timeConvert(n) {\n    var num = n;\n    var hours = num / 60;\n    var rHours = Math.floor(hours);\n    var minutes = (hours - rHours) * 60;\n    var rMinutes = Math.round(minutes);\n    return rHours + \":\" + rMinutes;\n  }\n};\n\nexport default HelperFunction;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport HelperFunction from \"../../Components/Helper\";\n\nimport \"./style.css\";\n\nconst ScheduleCard = props => {\n  console.log(props);\n  let channelName = props.match.params.name;\n  let filterList = props.data.filter(i =>\n    i.show.network ? i.show.network.name === channelName : false\n  );\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"fixedHeight\">\n              <table className=\"table\" id=\"table\">\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Show Start</th>\n                    <th>Show End</th>\n                    <th>Show Description</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filterList.map(item => {\n                    return (\n                      <tr key={item.id}>\n                        <td>\n                          <Link to={`/detail/${item.id}`}>{item.name}</Link>\n                        </td>\n                        <td>{item.airtime}</td>\n                        <td>\n                          {HelperFunction.getHourFromMin(\n                            HelperFunction.addTime(item.airtime, item.runtime)\n                          )}\n                        </td>\n                        <td>\n                          <span>\n                            <div\n                              dangerouslySetInnerHTML={{ __html: item.summary }}\n                            />\n                          </span>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ScheduleCard;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass ShowList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { channel: [] };\n  }\n\n  componentDidMount() {\n    this.setState({ channel: this.props.channel, filter: this.props.channel });\n  }\n\n  searchTerm = event => {\n    this.dataSource = [...this.state.filter];\n    let searchInput = event.target.value.toLowerCase();\n    console.log(searchInput);\n    let tableData = this.dataSource.filter(item => {\n      return (\n        String(item)\n          .toLowerCase()\n          .toString()\n          .search(searchInput) !== -1\n      );\n    });\n\n    if (searchInput == \"\") {\n      tableData = this.dataSource;\n    }\n    if (tableData.length > 0) {\n      this.setState({ channel: tableData });\n    } else {\n      this.setState({ channel: [] });\n    }\n    console.log(tableData);\n  };\n  render() {\n    // console.log(this.state);\n    return (\n      <React.Fragment>\n        <main className=\"et-main\">\n          <section style={{ height: \"80vh\" }}>\n            <div className=\"row\">\n              <div className=\"col-12\" style={{ textAlign: \"center\" }}>\n                <h1>Channel List</h1>\n              </div>\n            </div>\n            <input\n              style={{ width: \"20%\", marginLeft: \"2%\" }}\n              type=\"text\"\n              className=\"searchBar\"\n              placeholder=\"Search...\"\n              onKeyUp={this.searchTerm}\n            />\n            <div className=\"container\">\n              <div className=\"row\">\n                {this.state.channel.map(i => {\n                  return (\n                    <div className=\"col-3 col-s-6 col-xs-12\" key={i}>\n                      <Link to={`/channel/${i}`}>\n                        <div className=\"card\">\n                          <div className=\"card-body\">\n                            <div className=\"icon  icon-shape icon-shape-primary rounded-circle mb-4\">\n                              <img\n                                src=\"//tvscheduleindia.com/img/TVSi_logo.png\"\n                                height=\"30px\"\n                                width=\"30px\"></img>\n                            </div>\n                            <div className=\"\">{i}</div>\n                          </div>\n                        </div>\n                      </Link>\n                    </div>\n                  );\n                })}\n              </div>\n              {/* <div className=\"row\">\n                        <div className=\"col-12\">\n                          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14].map(\n                            item => {\n                              return (\n                                <div className=\"col-4 col-s-6 col-xs-12\">\n                                  <div\n                                    className=\"card\"\n                                    style={{\n                                      width: \"90%\",\n                                      height: \"150px\"\n                                    }}></div>\n                                </div>\n                              );\n                            }\n                          )}\n                        </div>\n                      </div> */}\n            </div>\n          </section>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ShowList;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst detailView = props => {\n  console.log(props);\n  let id = props.match.params.id;\n  console.log(id);\n  let data = props.data.find(i => Number(i.id) === Number(id));\n  console.log(props.data.find(i => i.id == 1760877));\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-12 \">\n          <div className=\"row detailCard\">\n            <div\n              className=\"col-4 col-xs-6\"\n              style={{\n                height: \"300px\",\n                padding: \"unset\",\n                background: `url(${data.show.image.medium})`\n              }}></div>\n            <div className=\"col-8 col-xs-6\">\n              <div className=\"row\">\n                <div\n                  className=\"col-12\"\n                  style={{ fontSize: \"2rem\", fontWeight: \"900\" }}>\n                  {data.name}\n                </div>\n                <div className=\"col-3 col-s-6\" style={{ padding: \"unset\" }}>\n                  <span className=\"cssPill\">Season {data.season}</span>\n                </div>\n                <div className=\"col-3 col-s-6\" style={{ padding: \"unset\" }}>\n                  <span className=\"cssPill\">{data.show.status}</span>\n                </div>\n                <div className=\"col-3 col-s-6\" style={{ padding: \"unset\" }}>\n                  <span className=\"cssPill\">{data.show.type}</span>\n                </div>\n                <div className=\"col-3 col-s-6\" style={{ padding: \"unset\" }}>\n                  <span className=\"cssPill\">{data.show.language}</span>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <div dangerouslySetInnerHTML={{ __html: data.summary }}></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default detailView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport ScheduleCard from \"../ChannelList\";\nimport ShowList from \"../ShowList\";\nimport DetailView from \"../DetailView\";\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: [], channel: [] };\n  }\n\n  componentDidMount() {\n    // let thisSTATE = this.state.data;\n\n    axios\n      .get(\"http://api.tvmaze.com/schedule?country=US\")\n      .then(res => {\n        let channelName = [];\n        res.data.map(item =>\n          item.show.network ? channelName.push(item.show.network.name) : null\n        );\n        this.setState({ channel: [...new Set(channelName)], data: res.data });\n      })\n      .catch(function(error) {\n        // handle error\n      })\n      .finally(function() {\n        // thisSTATE = data;\n      });\n  }\n\n  render() {\n    return (\n      <Switch>\n        {this.state.channel.length > 0 ? (\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <ShowList {...props} channel={this.state.channel} />\n            )}></Route>\n        ) : (\n          \"Loading\"\n        )}\n        {this.state.data.length > 0 ? (\n          <Route\n            path=\"/channel/:name\"\n            render={props => (\n              <ScheduleCard {...props} data={this.state.data} />\n            )}></Route>\n        ) : (\n          \"Loading....\"\n        )}\n        {this.state.data.length > 0 ? (\n          <Route\n            path=\"/detail/:id\"\n            render={props => (\n              <DetailView {...props} data={this.state.data}></DetailView>\n            )}></Route>\n        ) : (\n          \"Loading...\"\n        )}\n      </Switch>\n    );\n  }\n}\n\nexport default MainComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport Header from \"./Components/Header\";\n\nimport Layout from \"./Pages/Main\";\n\nfunction App() {\n  let nav = React.createRef();\n  let scrollFunction = () => {\n    window.scrollTo({\n      top: nav.current.offsetHeight,\n      left: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header scrollFunction={scrollFunction} nav={nav}></Header>\n        <Router>\n          <Layout id=\"layout\" style={{}}></Layout>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}